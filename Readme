Markdown
===================================================================================================================================================================================================================
# Inventario Fusionado (2.0 - Analizado)
===================================================================================================================================================================================================================


## 1. Descripción General

Inventario Fusionado es una aplicación web desarrollada con Jakarta EE (Servlets y JSP) para gestionar inventarios y productos asociados.
Permite a los usuarios autenticados realizar operaciones CRUD (Crear, Leer, Actualizar, Borrar)
sobre las entidades principales (Productos, Usuarios)
y visualizar un historial de movimientos (auditoría) de las acciones realizadas en el sistema.

El proyecto utiliza una base de datos SQLite embebida para el almacenamiento de datos.

Resumen: Evolución y Estado Actual del Proyecto "Inventario Fusionado" (~v1.6.0)

**1. Visión Original (Stock_Manager v1.0.x):**
* Plataforma: Aplicación de Consola Java.
* Base de Datos: MySQL.
* Objetivo: Gestión básica (CRUD simple, visualización) de usuarios/artículos/movimientos para trabajo DAM.
* Problemas: Seguridad básica (permisos) identificada en v1.0.1.

**2. Transición y Planificación Intermedia (Inventario_Fusionado v1.0-v1.5):**
* **Cambio Radical (v1.0):** Se migra a Aplicación Web (Servlets/JSP) con Base de Datos SQLite embebida, fusionando ideas. Foco inicial en CRUD de Inventarios.
* **Avances (v1.5):** Se añade Login/Logout básico (HttpSession). Se estabiliza CRUD Inventarios. Se planifica un flujo de **Buffer/Aprobación** para Productos. Se planifica añadir Filtro de Autenticación, Hashing, Roles, UI Productos/Usuarios, Movimientos y App JavaFX.

**3. Estado Actual (~v1.6.0) vs Aspiraciones:**

* **Aspiraciones Cumplidas:**
    * Gestión CRUD básica de Inventarios, Productos y Usuarios implementada en backend.
    * Interfaz Web (Servlet/JSP) funcional con Tomcat y SQLite.
    * Login/Logout y protección básica de rutas (AuthenticationFilter) implementados.
    * Registro y visualización de Movimientos implementados.
    * Inicialización automática de la BD SQLite funcional.

* **Aspiraciones Cambiadas / Descartadas:**
    * Plataforma Consola/MySQL: Totalmente descartada.
    * **Flujo de Buffer de Productos:** ¡El cambio más importante! El flujo planificado en v1.5 fue **descartado** en favor de un CRUD directo de Productos, que es lo que está implementado ahora.
    * Salida JSON/Ejecutable (idea inicial): Descartada con el paso a Web.

* **Aspiraciones Pendientes / Áreas Clave de Mejora:**
    * **Seguridad:** Hashing de contraseñas y Roles/Permisos detallados (CRÍTICO).
    * **Refactorización JSP:** Eliminar scriptlets y usar JSTL/EL.
    * **UI/UX:** Pulir interfaces (especialmente Usuarios), resolver conflictos CSS, mejorar edición inline o cambiarla.
    * **Robustez:** Mejorar validación de entradas y manejo de errores.
    * **App Escritorio:** Desarrollo de la app JavaFX sigue pendiente.
    * **Pruebas:** Implementar pruebas unitarias/integración.
    * **Calidad Código:** Estandarizar nombres (DAOs), añadir Javadoc.

**En Conclusión:** El proyecto evolucionó de una app de consola/MySQL a una web/SQLite.
Cumple las funciones CRUD básicas y de autenticación, pero **descartó el flujo de buffer de productos** planificado previamente.
Las áreas más importantes para el futuro son la **seguridad (hashing/roles)** y la **mejora/refactorización de la capa de vista (JSP)**.

## 2. Tecnologías Utilizadas

* **Backend:**
    * Java 17+
    * Jakarta EE:
        * Servlet 6.0 (`jakarta.servlet.*`)
        * JSP 3.1 (`jakarta.servlet.jsp.*`)
        * Annotations (`@WebServlet`, `@WebFilter`, `@WebListener`)
    * JDBC (para SQLite)
* **Base de Datos:** SQLite (a través de `sqlite-jdbc`)
* **Servidor de Aplicaciones:** Apache Tomcat 10.1+
* **Build Tool:** Apache Maven
* **Frontend:**
    * HTML5
    * CSS3 (incluyendo estilos personalizados en `style.css`)
    * Bootstrap 5 (CDN)
    * JavaScript (Básico, en `Main.js`)

## 3. Estructura del Proyecto (Maven Standard)

Inventario_Fusionado/
├── pom.xml                     # Archivo de configuración de Maven
├── database/                   # Carpeta para el archivo SQLite
│   └── InventarioFusionado.db  # Base de datos (generada/usada en ejecución)
├── src/
│   ├── main/
│   │   ├── java/               # Código fuente Java
│   │   │   └── Inventario_Fusionado/
│   │   │       ├── controller/ # Servlets (FrontController, ProductController, etc.)
│   │   │       ├── dao/        # Clases de Acceso a Datos (ProductDAO, UsuarioDAO, etc.)
│   │   │       ├── database/   # Clases de gestión de BD (DBManager, DatabaseInitializer)
│   │   │       ├── filter/     # Filtros (AuthenticationFilter)
│   │   │       ├── listener/   # Listeners (WebAppInitializer)
│   │   │       └── model/      # Clases de Modelo/Entidad (Product, Usuario, etc.)
│   │   ├── resources/          # Archivos de recursos (no-Java)
│   │   │   └── sqlite/
│   │   │       └── Inventario.sql # Script de inicialización de la BD
│   │   └── webapp/             # Raíz de la aplicación web
│   │       ├── WEB-INF/        # Recursos protegidos (web.xml si existiera)
│   │       ├── css/            # Hojas de estilo CSS
│   │       ├── js/             # Archivos JavaScript
│   │       ├── images/         # Archivos de imagen
│   │       ├── includes/       # Fragmentos JSP reutilizables (header.jsp, footer.jsp)
│   │       ├── Tablas/         # Subdirectorio para vistas de tablas específicas
│   │       │   ├── Inventario/ (list-inventarios.jsp, inventario-form.jsp, etc.)
│   │       │   ├── movimiento/ (list-movimientos.jsp)
│   │       │   ├── producto/   (product-list.jsp)
│   │       │   └── usuario/    (list-usuarios.jsp)
│   │       └── *.jsp           # Páginas JSP principales (index.jsp, login.jsp, etc.)
│   └── test/                   # Código de pruebas (si existiera)
└── target/                     # Directorio de salida de la compilación (contiene .war)


## 4. Características Implementadas

* **Autenticación de Usuarios:**
    * Formulario de Login (`login.jsp`).
    * Validación de credenciales contra la base de datos (`LoginController`, `usuarioDAO`).
    * Creación de sesión de usuario (`HttpSession`).
    * Protección de rutas mediante `AuthenticationFilter`.
    * Funcionalidad de Logout (`logout.jsp`).
* **Gestión de Inventarios (CRUD Completo):**
    * Listado en tabla (`list-inventarios.jsp`).
    * Listado en formato de tarjetas (`visualizar-inventarios.jsp`).
    * Formulario dedicado para Crear/Editar (`inventario-form.jsp`).
    * Lógica de backend (`InventoryController`, `inventoryDAO`).
* **Gestión de Productos (CRUD Completo):**
    * Listado en tabla con formularios *inline* para Editar/Borrar (`product-list.jsp`).
    * Formulario colapsable para Crear nuevos productos en la misma vista (`product-list.jsp`).
    * Lógica de backend (`ProductController`, `ProductDAO`).
    * **Nota:** Se eliminó el flujo previo de "buffer" de productos; ahora el CRUD es directo.
* **Gestión de Usuarios (CRUD Básico):**
    * Listado en tabla con formulario *inline* para Editar/Borrar (`list-usuarios.jsp`).
    * Formulario colapsable para Crear nuevos usuarios (`list-usuarios.jsp`).
    * Lógica de backend (`UsuarioController`, `usuarioDAO`).
    * **Pendiente:** Interfaz de usuario marcada como no finalizada; requiere revisión/mejora.
* **Historial de Movimientos:**
    * Listado de solo lectura de las acciones realizadas (`list-movimientos.jsp`).
    * Registro automático de movimientos al crear/actualizar/eliminar productos (`ProductController` -> `movimientoDAO.addMovimiento`).
* **Inicialización de Base de Datos:**
    * Creación automática del esquema de la base de datos al iniciar la aplicación por primera vez, ejecutando el script `Inventario.sql` (`WebAppInitializer`, `DatabaseInitializer`).

## 5. Configuración y Ejecución

### Prerrequisitos

* **JDK 17** (o superior) instalado y configurado.
* **Apache Maven** instalado y configurado.
* **Apache Tomcat 10.1** (o superior, compatible con Servlet 6.0 / JSP 3.1) descargado y configurado.

### Pasos para Ejecutar

1.  **Clonar/Descargar el Proyecto:** Obtén el código fuente del proyecto.
2.  **Construir con Maven:**
    * Abre una terminal o línea de comandos en el directorio raíz del proyecto (donde está `pom.xml`).
    * Ejecuta el comando de Maven para compilar y empaquetar la aplicación:
        ```bash
        mvn clean package
        ```
    * Esto generará un archivo `.war` (ej: `Inventario_Fusionado-1.0-SNAPSHOT.war`) dentro del directorio `target/`.
3.  **Desplegar en Tomcat:**
    * Copia el archivo `.war` generado en el paso anterior al directorio `webapps` de tu instalación de Apache Tomcat.
    * Tomcat detectará automáticamente el archivo `.war` y desplegará la aplicación.
4.  **Iniciar Tomcat:**
    *Iniciar Tomcat:
     • Abre una terminal o Explorador de archivos y navega hasta el directorio “bin” de tu Tomcat. Por ejemplo:
     C:\Users\guill\OneDrive\Desktop\Inventario_Fusionado\Apache-tomcat\apache-tomcat-10.1.40-windows-x64\apache-tomcat-10.1.40\bin
     • En Windows: haz doble clic en startup.bat o ejecútalo desde la línea de comandos:
     > startup.bat
     • En Linux/macOS: ejecuta en la terminal:
     $ ./startup.sh
     • Verifica en consola que no haya errores y que escuche en el puerto configurado (por defecto 8080).
        Si recibes “Address already in use”, detén el proceso que ocupa ese puerto o cambia el valor de <Connector port="8080" .../> en conf/server.xml.

5.  **Acceder a la Aplicación:**
    * Abre tu navegador web y ve a la URL donde Tomcat ha desplegado la aplicación. Generalmente será algo como:
        `http://localhost:8080/NombreDelArchivoWarSinExtension/`
        (Ej: `http://localhost:8080/Inventario_Fusionado-1.0-SNAPSHOT/`)
    * Deberías ver la página de login (`login.jsp`).
6.  **Inicialización de la Base de Datos:**
    * Al iniciar la aplicación por primera vez, el `WebAppInitializer` llamará a `DatabaseInitializer`, que intentará crear el archivo `database/InventarioFusionado.db` (si no existe) y ejecutar el script `src/main/resources/sqlite/Inventario.sql` para crear las tablas. Revisa la consola de Tomcat para ver los mensajes de inicialización o posibles errores.
7.  **Login:**
    * **Importante:** El código actual no muestra la creación de un usuario por defecto. Necesitarás:
        * Asegurarte de que el script `Inventario.sql` inserte un usuario inicial.
        * O registrar un usuario manualmente si existiera una opción de registro (no vista en los JSPs actuales) o directamente en la base de datos SQLite usando alguna herramienta externa.
    * Usa las credenciales del usuario creado para iniciar sesión.

## 6. Estado Actual y Áreas de Mejora

* **Funcionalidad Principal:** Los CRUDs básicos para Inventarios, Productos y Usuarios están implementados en el backend y tienen interfaces web asociadas, aunque la UI de usuarios necesita revisión. El login y el historial de movimientos son funcionales.
* **Tecnología JSP:** El uso intensivo de *scriptlets* (`<% %>`) es funcional pero **altamente desaconsejado** en desarrollos modernos. Migrar a **JSTL (Tag Libraries) y Expression Language (EL)** mejoraría enormemente la legibilidad, mantenibilidad y separación de la lógica Java de la presentación HTML.
* **Seguridad:**
    * **Contraseñas:** Se almacenan y comparan en **texto plano**. Es **crítico implementar hashing de contraseñas** (ej. BCrypt) usando una librería como Spring Security o directamente `java.security`.
    * **SQL Injection:** El uso de `PreparedStatement` ayuda a prevenirla, pero se debe asegurar que todas las entradas del usuario se manejen de forma segura.
    * **Control de Acceso:** Actualmente solo hay autenticación (estar logueado o no). Falta implementar **autorización** (roles y permisos) para diferenciar lo que puede hacer un administrador de un usuario normal.
    * **Validación de Entrada:** La validación es básica y dispersa. Debería ser más robusta y centralizada (tanto en frontend con JS/HTML5 como en backend en los Controllers) para prevenir datos inválidos o maliciosos.
* **Manejo de Errores:** Es inconsistente. Se debería adoptar una estrategia uniforme, mostrando mensajes amigables al usuario y registrando detalles técnicos en logs, en lugar de solo imprimir stack traces en la consola. Considerar una página de error genérica mejorada.
* **Interfaz de Usuario (UI/UX):**
    * La edición "inline" en tablas puede ser compleja de usar y mantener. Podría considerarse usar formularios dedicados (como en Inventarios) o modales de Bootstrap.
    * Resolver los conflictos de CSS/Headers mencionados en `list-usuarios.jsp`.
    * Mejorar la retroalimentación al usuario después de las acciones (los "flash messages" son un buen comienzo).
* **Código:**
    * Añadir más comentarios y Javadoc donde falten.
    * Estandarizar convenciones de nombrado (ej. Clases DAO).
    * Refactorizar código duplicado si existe.
    * Considerar el uso de un framework (como Spring MVC) para simplificar el manejo de peticiones, DAOs, etc., aunque esto sería un cambio mayor.
* **Configuración:** Hacer la ruta de la base de datos configurable (ej. a través de variables de entorno o un archivo de propiedades) en lugar de depender de rutas relativas fijas.

## 7. Próximas Tareas (Sugeridas)

1.  **Seguridad:** Implementar Hashing de Contraseñas (Prioridad Alta).
2.  **Refactorización JSP:** Migrar Scriptlets a JSTL/EL.
3.  **UI Usuarios:** Finalizar y pulir la interfaz de gestión de usuarios.
4.  **Roles y Permisos:** Implementar autorización basada en roles.
5.  **Validación:** Mejorar y centralizar la validación de entradas.
6.  **Manejo de Errores:** Implementar una estrategia de manejo de errores consistente.
7.  **Pruebas:** Añadir pruebas unitarias y/o de integración.


===================================================================================================================================================================================================================
              DIAGRAMA DE CLASES, FLUJO Y DEPENDENCIAS - Inventario_Fusionado (v1.6.0 - Analizado) - Revisión Visual Pulida
===================================================================================================================================================================================================================

 LEYENDA:
   ┌───────────────────────────┐
   │ [Componente <<Tipo>>]     │ : Clase/Interfaz Java con su rol (Servlet, DAO, Model, Filter, Listener, Helper)
   └───────────────────────────┘
   [Archivo.ext]               : Archivo de configuración, SQL, JSP, etc.
   [Externo]                   : Componente fuera del proyecto (Navegador, Tomcat, Librería JDBC)

   --->                        : Flujo de control principal / Llamada a método
   <---                        : Retorno de datos / Respuesta
   --[uses]-->                  : Dependencia (una clase utiliza otra)
   --(creates)-->               : Creación de instancia de objeto
   --(reads/writes)-->          : Acceso a base de datos o archivo
   ··························· : Límite entre capas o fases lógicas
   * Acción/Dato               : Descripción de la acción o datos pasados

===================================================================================================================================================================================================================
 FASE 1: ARRANQUE DE LA APLICACIÓN (Ciclo de Vida Tomcat)
===================================================================================================================================================================================================================

   ┌─────────────────────────┐          *Inicia App* ┌──────────────────────────────┐      *contextInitialized()*       ┌──────────────────────────────────┐
   │ [Externo: Apache Tomcat]│ --------------------> │ [WebAppInitializer <<Listener>>]│ -----------------------------> │ [DatabaseInitializer <<Helper>>] │
   └─────────────────────────┘                       └──────────────────────────────┘                                   └───────────────┬──────────────────┘
                                                                                                                                     │ *initializeDatabase()*
                                                                                                     ┌───────────────────────────────┤
                                                                                                     │                               │
                                                                                                     │   --(reads)--> [sqlite/Inventario.sql <<Resource>>] *Lee Script SQL*
                                                                                                     │                               │
                                                                                                     │   --[uses]--> ┌────────────────────────┐
                                                                                                     │               │ [DBManager <<Helper>>] │
                                                                                                     │               └──────────┬─────────────┘
                                                                                                     │                          │ *getConnection()*
                                                                                                     │                          │
                                                                                                     │                          +-------> [Externo: org.sqlite.JDBC Driver] ---> [database/InventarioFusionado.db]
                                                                                                     │                          │
                                                                                                     │                          +------> *Retorna:* [java.sql.Connection]
                                                                                                     │                          │
                                                                                                     │ <------------------------+
                                                                                                     │                          │
                                                                                                     │   *Usa Connection y Statement para ejecutar SQL del script*
                                                                                                     │                          │
                                                                                                     +-----(writes)---> [database/InventarioFusionado.db]

===================================================================================================================================================================================================================
 FASE 2: FLUJO DE PETICIÓN HTTP (Ejemplo: Ruta Protegida GET/POST)
===================================================================================================================================================================================================================

   ┌──────────────────────────┐      *HTTP Request*     ┌─────────────────────────┐      *Recibe y Enruta*     ┌──────────────────────────────────────┐
   │ [Externo: Navegador Web] │ ----------------------> │ [Externo: Apache Tomcat]│ -------------------------> │ [AuthenticationFilter <<Filter>>]    │
   └──────────────────────────┘                         └─────────────────────────┘                            └────────────────┬────────────---──────┘
                                                                                                                                │ *doFilter()*
                                                                                                       ┌────────────────────────┤
                                                                                                       │                        │ *Obtiene HttpSession*
                                                                                                       │                        │ *Consulta session.getAttribute("usuario")*
                                                                                                       │                        │
                                                                                                       │   *IF (Logueado OR Público OR Recurso Estático)*
                                                                                                       │   │ *chain.doFilter()*
                                                                                                       │   V
                                                         +---------------------------------------------+   │ [Pasa al Servlet Correspondiente]
                                                         │                                                 │
                                                         │   *ELSE (No Logueado Y Protegido)* 		       │
                                                         │   │ *response.sendRedirect("/login.jsp")*       │
                                                         │   V                                             │
   ┌──────────────────────────┐ <---- *HTTP Redirect*---+                                                  │
   │ [Externo: Navegador Web] │                                                                            │
   └──────────────────────────┘                                                                            │
                                                                                                           │
 ·····································································································..···│ Flujo Principal (Si Autenticado/Público)
                                                                                                           V
																										   V [Desde AuthenticationFilter]
                                                                       ┌─────────────────────────────────────────────────────────────────────────────────┐
                                                                       │                            CAPA DE CONTROLADORES <<Servlet>>                    │
                                                                       └───────────────────────────────────┬─────────────────────────────────────────────┘
                                                                                                           │ *Recibe Request/Response del Filtro/Tomcat*
                                                                                                           │ *Ejecuta doGet() o doPost() según Método HTTP*
                                                                                                           │ *El Servlet específico es elegido por Tomcat (@WebServlet URL Pattern)*
                                                                                                           │
                                                                          ┌────────────────────────────────┴──────────────────────────────────────────────────┐
                                                                          │                                │                                                  │
                                                                          V                                V                                                  V
                                                                  ┌───────────────────────────┐   ┌───────────────────────────────┐   ┌─────────────────────────────────────┐   ┌───────────────────────────────┐   ┌─────────────────────────────┐
                                                                  │ [FrontController] (/ruta) │   │ [ProductController] (/producto)   │ [InventoryController] (/inventario) │   │[UsuarioController] (/usuario) │   │ [LoginController] (/login)  │ ... etc
                                                                  └───────────┬───────────────┘   └───────────────┬───────────────┘   └─────────────────┬───────────────────┘   └───────────┬───────────────────┘   └─────────┬───────────────────┘
                                                                              │                                   │                                     │                                   │                                 │
                                                                    *Método:* │ doGet()                           │ doGet()/doPost()                    │ doGet()/doPost()                  │ doGet()/doPost()                │ doPost()/doGet()
                                                                    *Params:* │ 'vista'                           │ 'action', ...                       │ 'action', 'id', 'nombre', ...     │ 'action', 'id', 'username', ... │ 'username', 'password'
                                                                              │                                   │                                     │                                   │                                 │
                                                                  *Usa DAOs:* │ - ProductDAO                      │ - ProductDAO                        │ - inventoryDAO                    │ - usuarioDAO                    │ - usuarioDAO
                                                                              │ - usuarioDAO                      │ - movimientoDAO                     │                                   │                                 │
                                                                              │ - inventoryDAO                    │                                     │                                   │                                 │
                                                                              │ - movimientoDAO                   │                                     │                                   │                                 │
                                                                              │                                   │                                     │                                   │                                 │
                                                                    *Acción:* │ *Carga Datos (getAll...)*         │ *Acción CRUD Producto*              │ *Acción CRUD Inventario*          │ *Acción CRUD Usuario*           │ *Valida Usuario*
                                                                              │                                   │ *+ Registra Movimiento*             │                                   │                                 │ *Maneja Sesión*
                                                                              │                                   │                                     │                                   │                                 │
                                                                   *Request:* │ setAttribute(lista)               │ setAttribute(lista, msg)            │ setAttribute(obj, err)            │ setAttribute(lista, msg)        │ setAttribute("error")
                                                                              │                                   │                                     │                                   │                                 │   o session.setAttr("usuario")
                                                                              │                                   │                                     │                                   │                                 │
                                                                 *Navegación:*│ Forward ->                        │ Forward ->                          │ Forward/Redirect ->               │ Forward ->                      │ Forward/Redirect ->
                                                                              │   [index.jsp] o                   │   [product-list.jsp]                │   [inv-form.jsp] o                │   [list-usuarios.jsp]           │   [index.jsp] o
                                                                              │   [indextablas.jsp]               │                                     │   [list-inventarios.jsp]...       │                                 │   [login.jsp]
                                                                              │                                   │                                     │                                   │                                 │
                                                                              V                                   V                                     V                                   V                                 V
                                                                              │                                   │                                     │                                   │                                 │
                                                                              +-----------------------------------┴─────────────────────────────────────┴────────────────────────────────---┴---------------------------------+
                                                                                                                  │
                                                                                                                  V [Hacia Capa de Vista (*.jsp)]
   ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
   │                                                       CAPA DE VISTA <<View>> (*.jsp)                                                                              │
   └───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
        │ *Recibe Request/Response desde Controlador (forward) o Navegador (redirect)* 
        │
        V
   ┌───────────────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
   │ [index.jsp]               │ Lee Atributos (requestScope, sessionScope) usando Scriptlets <%=...%> o JSTL/EL ${...}                                                  │
   │ [login.jsp]               │ Muestra Formularios HTML                                                                                                                │
   │ [product-list.jsp]        │ Itera sobre Colecciones de {Modelos} (List<Product>, etc.)                                                                              │
   │ [list-usuarios.jsp]       │ Incluye componentes reutilizables: <jsp:include page="includes/header.jsp"/>, <jsp:include page="includes/footer.jsp"/>                 │
   │ [inventario-form.jsp]     │ Utiliza Bootstrap 5 para el layout y componentes.                                                                                       │
   │ ... etc                   │ Genera HTML final dinámico con los datos proporcionados                                                                                 │
   └───────────────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
                                                                                               │
                                                                                               V
                                                                                    ┌─────────────────────────┐
                                                                                    │ [Externo: Apache Tomcat]│
                                                                                    └───────────┬─────────────┘
                                                                                                │ *HTTP Response (HTML)*
                                                                                                V
                                                                                     ┌──────────────────────────┐
                                                                                     │ [Externo: Navegador Web] │
                                                                                     └──────────────────────────┘

===================================================================================================================================================================================================================
 FASE 3: CAPA DE ACCESO A DATOS (DAO)
===================================================================================================================================================================================================================

   ┌─────────────────────────────┐
   │ CONTROLADORES               │ -----> *Llama a métodos DAO* ---->
   │ (Ej: [ProductController])   │                                  │
   └─────────────────────────────┘                                  V
                                     ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                     │                                      CAPA DAO <<DAO>>                                                         │
                                     ├─────────────────────────┬───────────────────────────┬───────────────────────────┬─────────────────────────────┤
                                     │ [ProductDAO]            │ [inventoryDAO]            │ [usuarioDAO]              │ [movimientoDAO]             │
                                     └───────────┬─────────────┴───────────┬───────────────┴───────────┬───────────────┴─────────────┬───────────────┘
                                                 │                         │                           │                             │
                                                 +------------[uses]-------+--------------[uses]-------+------------------[uses]-----+--[uses]-->   ┌────────────────────────┐
                                                                                                                                                    │ [DBManager <<Helper>>] │
                                                                                                                                                    └──────────┬─────────────┘
                                                                                                                                                               │ *getConnection()*
                                                                                                                                                               V
                                                                                                                                                    ┌───────────────────────────────────┐
                                                                                                                                                    │ [Externo: org.sqlite.JDBC Driver] │
                                                                                                                                                    └───────────┬───────────────────────┘
                                                                                                                                                                │
                                                                                                                                                                V
                                                                                                                                                    ┌───────────────────────────────────┐
                                                                                                                                                    │ [database/InventarioFusionado.db] │
                                                                                                                                                    └───────────────────────────────────┘
        *Dentro de cada DAO:*
        - Define SQL (SELECT, INSERT, UPDATE, DELETE)
        - Usa [java.sql.Connection], [java.sql.PreparedStatement], [java.sql.ResultSet] (con try-with-resources)
        - Ejecuta SQL --> (Accede a DB)
        - Procesa ResultSet --(creates)--> {Modelo <<Model>>} / {List<Modelo>}
        - Retorna {Modelo}/{List<Modelo>}/boolean/null <-- (Devuelve a Controlador)
        - Manejo básico de SQLException (System.err / printStackTrace)

===================================================================================================================================================================================================================
 MODELOS DE DATOS <<Model>> (POJOs - Contenedores de Datos)
===================================================================================================================================================================================================================

   ┌─────────────────────┐      ┌───────────────────────┐      ┌─────────────────────┐      ┌──────────────────────────┐
   │ [Product]           │      │ [Inventory]           │      │ [Usuario]           │      │ [Movimiento]             │
   ├─────────────────────┤      ├───────────────────────┤      ├─────────────────────┤      ├──────────────────────────┤
   │ - idProducto: int   │      │ - id: int             │      │ - idUsuario: int    │      │ - idMovimiento: int      │
   │ - nombre: String    │      │ - nombreProducto: String│    │ - username: String  │      │ - idUsuario: int         │
   │ - descripcion: String│     │ - cantidad: int       │      │ - password: String(!!)     │ - fechaHora: LocalDateTime │
   │ - precio: BigDecimal│      └───────────────────────┘      └─────────────────────┘      │ - tablaAfectada: String  │
   │ - stock: int        │                                                                  │ - idRegistroAfect: int   │
   │ - idInventario: int │                                                                  │ - accion: String         │
   └─────────────────────┘                                                                  │ - estado: String         │
                                                                                            │ - detallesCambio: String │
                                                                                            └──────────────────────────┘

===================================================================================================================================================================================================================
 MODELOS DE FLUJO Como moverse por el programa
===================================================================================================================================================================================================================
┌─────────────────────────┐
│         INICIO          │
│ (Acceso a la Web App)   │
└───────────┬─────────────┘
            │
            V
┌─────────────────────────┐      ┌───────────────────────────┐     ┌───────────────────────────┐
│  [Usuario] Accede a URL │ ---> │ [Tomcat] Sirve Recurso    │ --> │ [PANTALLA: login.jsp]     │
│ (ej. /Inventario_Fusionado/)   │ (Puede ser index->login)  │     │ *Muestra Formulario Login*│
└─────────────────────────┘      └──────────────────┬────────┘     └──────────┬────────────────┘
            ▲                                       │                         │
            │                                       │                         │ *Introduce User/Pass*
            │                                       │                         │ *Pulsa "Entrar"*
            │ *(Login Falla)*                       │                         V
            │                                       │      *POST /login*      ┌───────────────────────────┐
            └───────────────────────────────────────┼-------------------------│ [LoginController]         │
                                                    │                         └───────────┬───────────────┘
                                                    │                                     │ *Valida credenciales*
                                                    │                                     │ --[uses]--> [UsuarioDAO.validarUsuario()]
                                                    │                                     │
                                                    │   ┌───────────────────────────┐     │
                                                    ├───< ¿Credenciales Válidas?     >────┤
                                                    │   └───────────┬───────────────┘     │
                                               *No* │               │ *Sí*                │
                                                    │               │                     │
                                                    │               │ *Crea HttpSession* │
                                                    │               │ *session.setAttribute("usuario", {Usuario})*
                                                    │               V                     V
                                                    │  ┌───────────────────────────┐   ┌───────────────────────────┐
                                                    │  │ [LoginController]         │   │ [LoginController]         │
                                                    │  │ *setAttribute("error")*   │   │ *response.sendRedirect*   │
                                                    │  │ *forward("login.jsp")*    │   │ --> ("index.jsp")         │
                                                    │  └───────────────────────────┘   └───────────┬───────────────┘
                                                    │                                              │
                                                    └──────────────────────────────────────────────┘
                                                                                                   │
                                                                                                   V
┌───────────────────────────┐     ┌───────────────────────────┐                          ┌───────────────────────────┐
│ [PANTALLA: index.jsp]     │ <-- │ [Tomcat] Sirve index.jsp  │ <----------------------- │ [Usuario] Navega a        │
│ *Muestra Bienvenida*      │     └─────────────┬─────────────┘                          │    /index.jsp             │
│ *o Incluye Vista (si hay)*│                   │                                        └───────────────────────────┘
│ *Muestra Menú (header.jsp)*│                  │
└───────────┬─────────────┘                     │
            │                                   │
            │ *Usuario Clica "Sección Tablas"*  │
            V                                   │
┌───────────────────────────┐                   │   *GET /ruta?vista=indextablas*
│ [FrontController]         │ <-----------------┘
└───────────┬─────────────┘
            │ *Forward("indextablas.jsp")*
            V
┌───────────────────────────┐      ┌───────────────────────────┐     ┌───────────────────────────┐
│ [PANTALLA: indextablas.jsp]| --> │ [Usuario] Elige Tabla     │ --> │ [Usuario] Clica           │
│ *Muestra opciones:*       │      │ (Ej: Productos)           │     │   "Ver Productos"         │
│  - Ver Productos          │      └───────────────────────────┘     └───────────┬───────────────┘
│  - Ver Usuarios           │                                                    │
│  - ...                    │                                                    │ *GET /ruta?vista=productos*
└───────────┬───────────────┘                                                    │
            │                                                                    V
            │                                                       ┌───────────────────────────┐
            └────────────────────────────────────────────────-------│ [FrontController]         │
                                                                    └───────────┬───────────────┘
                                                                                │ *Llama a DAO (productDAO.getAll...) *
                                                                                │ *setAttribute("productos", lista)*
                                                                                │ *setAttribute("vista", "productos")*
                                                                                │ *Forward("index.jsp")*
                                                                                V
                                     ┌─────────────────────────────────────────────────────────────────────────┐
                                     │ [PANTALLA: index.jsp (incluyendo /Tablas/producto/product-list.jsp)]    │
                                     │ *Muestra Tabla de Productos con forms inline + Formulario Nuevo abajo*  │
                                     └────────────────────────────────────┬────────────────────────────────────┘
                                                                          │
                      +---------------------------------------------------+-------------------------------------------------+
                      │ *(Opción 1: Editar)*                              │ *(Opción 2: Crear)*                             │ *(Opción 3: Borrar)*
                      V                                                   V                                                 V
┌───────────────────────────┐     ┌───────────────────────────┐      ┌───────────────────────────┐                   ┌─────────────────────────┐
│ [Usuario] Modifica datos  │ --> │ [Usuario] Pulsa "Guardar" │      │ [Usuario] Rellena Form Nuevo│                 │ [Usuario] Pulsa "Borrar"│
│ en la fila de la tabla    │     │ (en la fila editada)      │      │ Producto (colapsable)     │                   │ (con confirmación JS)   │
└───────────────────────────┘     └───────────┬───────────────┘      └───────────┬───────────────┘                   └──────────┬──────────────┘
                                              │                                  │                                              │
                                              │ *POST /producto*                 │ *POST /producto*                             │ *POST /producto*
                                              │ *action=edit*                    │ *action=insert*                              │ *action=delete*
                                              │ *id=X, datos...*                 │ *datos...*                                   │ *id=X*
                                              V                                  V                                              V
                                    ┌────────────────────────────┐      ┌───────────────────────────┐                    ┌─────────────────────────┐
                                    │ [ProductController]        │      │ [ProductController]       │                    │ [ProductController]     │
                                    └───────────┬────────────────┘      └───────────┬───────────────┘                    └──────────┬──────────────┘
                                                │ *Procesa Update* 					│ *Procesa Insert* 								│ *Procesa Delete*
                                                │ --> [ProductDAO.update] 			│ --> [ProductDAO.add]   						│ --> [ProductDAO.delete]
                                                │ --> [MovimDAO.add]      			│ --> [MovimDAO.add]     						│ --> [MovimDAO.add]
                                                │                         			│                        						│
                                                │ *Obtiene Lista Actualizada* 		│ *Obtiene Lista Actualizada* 					│ *Obtiene Lista Actualizada*
                                                │ --> [ProductDAO.getAll] 			│ --> [ProductDAO.getAll] 						│ --> [ProductDAO.getAll]
                                                │                         			│                         						│
                                                │ *setAttribute(lista, msg)*		│ *setAttribute(lista, msg)*					│ *setAttribute(lista, msg)*
                                                │                         			│                         						│
                                                │ *Forward* 						│ *Forward* 									│ *Forward*
                                                V                       		    V                         						V
                                    ┌───────────────────────────┐<------------------+-----------------------------------------------+
                                    │ vuelve a PANTALLA:        │
                                    │ product-list.jsp (refresh)│
                                    └───────────────────────────┘

···········································································································································
 Flujo Alternativo: Editar Inventario (Formulario Dedicado)
···········································································································································

 (Desde una pantalla de listado como [list-inventarios.jsp] o [visualizar-inventarios.jsp])

 ┌───────────────────────────┐     *GET /inventario?action=edit&id=X*      ┌─────────────────────────────────┐
 │ [Usuario] Clica "Editar"  │ ------------------------------------------> │ [InventoryController]           │
 │ (en un item específico)   │                                             └─────────────────┬───────────────┘
 └───────────────────────────┘                                                             │ *Verifica si ID existe (getById)*
                                                                                           │ *response.sendRedirect*
                                                                                           │ --> ("/Tablas/Inventario/inventario-form.jsp?id=X")
                                                                                           V
 ┌─────────────────────────────────┐     ┌─────────────────────────────────┐      ┌───────────────────────────────┐
 │ [PANTALLA: inventario-form.jsp] │ <-- │ [Tomcat] Sirve JSP              │ <----│ [Usuario] Navega a la URL     │
 │ *Muestra Formulario con datos*  │     └─────────────────────────────────┘      └───────────────────────────────┘
 │ *(JSP necesita lógica para      │
 │  cargar datos por ID si aplica)*│
 └─────────────────┬───────────────┘
                   │ *Usuario Modifica Datos*
                   │ *Pulsa "Actualizar"*
                   V
      *POST /inventario (action=update, id=X, datos...)*
                   │
 ┌─────────────────┴───────────────┐      *Procesa Update*            ┌─────────────────────────────────┐      *Redirecciona*
 │ [InventoryController]           │ -------------------------------> │ [InventoryDAO.updateInventory()]│ -------------------> Vuelve al Listado
 └─────────────────────────────────┘                                  └─────────────────────────────────┘                      (ej. /ruta?vista=inventarios)